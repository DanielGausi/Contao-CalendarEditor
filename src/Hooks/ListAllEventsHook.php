<?php

namespace DanielGausi\CalendarEditorBundle\Hooks;

use Contao\System;
use DanielGausi\CalendarEditorBundle\Models\CalendarModelEdit;
use DanielGausi\CalendarEditorBundle\Services\CheckAuthService;
use Frontend;

class ListAllEventsHook extends Frontend
{
    protected string $strTemplate = '';

    public function addEditLinks(array &$event, $url): void
    {
        $event['editRef'] = $url . '?edit=' . $event['id'];
        $event['editLabel'] = $GLOBALS['TL_LANG']['MSC']['caledit_editLabel'];
        $event['editTitle'] = $GLOBALS['TL_LANG']['MSC']['caledit_editTitle'];
    }

    /**
     * Manipulate the arrEvents-Array generated by ModuleCalendar and ModuleEventlist
     **/
    public function updateAllEvents($events, $arrCalendars)
    {
        if (!is_array($arrCalendars)) {
            return $events;
        }

        $this->import('FrontendUser', 'User');

        /** @var CheckAuthService $checkAuthService */
        $checkAuthService = System::getContainer()->get('caledit.service.auth');

        // preperations: Get more information about the calendars used for these "all events"
        $calendarObjects = [];            // needed for a detailed authorization check
        $isUserAdminForCalendar = [];  //
        $isUserMemberForCalendar = []; //
        $jumpPages = [];               // needed for the edit-links we want to add in his hook

        $calendarModels = CalendarModelEdit::findByIds($arrCalendars);
        foreach ($calendarModels as $calendarModel) {
            $currentPid = $calendarModel->id; // this is the Parent-ID for the events in the Event-Array

            $calendarObjects[$currentPid] = $calendarModel;

            $jumpPages[$currentPid] = '';
            if ($calendarModel->AllowEdit) {
                // is user admin for this calendar?
                $isUserAdminForCalendar[$currentPid] = $checkAuthService->isUserAdmin($calendarModel, $this->User);
                $isUserMemberForCalendar[$currentPid] = $checkAuthService->isUserAuthorized($calendarModel, $this->User);

                // get the jump-to-Edit-page for this calendar
                $page = $this->Database->prepare("SELECT * FROM tl_page WHERE id=(SELECT caledit_jumpTo FROM tl_calendar WHERE id=?)")
                    ->limit(1)
                    ->execute($calendarModel->id);
                if ($page->numRows === 1) {
                    $jumpPages[$currentPid] = $this->generateFrontendUrl($page->row(), '');
                }
            } else {
                // no editing allowed in this calendar
                $isUserAdminForCalendar[$currentPid] = false;
                $isUserMemberForCalendar[$currentPid] = false;
            }
        }

        // now: scan the events-array and add edit links where appropriate
        foreach ($events as &$date) {
            foreach ($date as &$timestamp) {
                foreach ($timestamp as &$event) {
                    $pid = $event['pid'];
                    if ($this->User->id !== null && $calendarObjects[$pid]->AllowEdit === '1' && $checkAuthService->areEditLinksAllowed($calendarObjects[$pid], $event, $this->User->id, $isUserAdminForCalendar[$pid], $isUserMemberForCalendar[$pid])) {
                        $this->addEditLinks($event, $jumpPages[$pid]);
                    }
                }
            }
        }

        return $events;
    }
}
