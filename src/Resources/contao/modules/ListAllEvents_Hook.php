<?php 

/**
 * Contao Open Source CMS
 * Copyright (C) 2005-2010 Leo Feyer
 *
 * Formerly known as TYPOlight Open Source CMS.
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program. If not, please visit the Free
 * Software Foundation website at <http://www.gnu.org/licenses/>.
 *
 * PHP version 5
 * @copyright  Daniel Gaussmann 2011-2018
 * @author     Daniel Gaussmann <mail@gausi.de>
 * @package    CalendarEditor
 * @license    GNU/LGPL
 */


/**
 * Class EventEditor_Hook
 */
 
include_once('CEAuthCheck.php');
 
 
class ListAllEvents_Hook extends Frontend
{

	/**
	 * Template
	 * @var string
	 */
	protected $strTemplate = '';	
	
		public function addEditLinks(&$aEvent, $strUrl)
		{
			$aEvent['editRef'] = $strUrl.'?edit='.$aEvent['id'];
			$aEvent['editLabel'] = $GLOBALS['TL_LANG']['MSC']['caledit_editLabel'];
			$aEvent['editTitle'] = $GLOBALS['TL_LANG']['MSC']['caledit_editTitle'];
		}
		
         /**
          * Search for the DatabaseResult the matching entry (entries) in $arrEvents and set additional information
        */
		// the FE-User can edit the event
		// a.) if FE-User is FE-Admin AND the Event was NOT blocked by a Backend-User  OR
		// b.) if (FE-User is the creator of this event OR every FE-User can edit the event) AND (the Event was NOT blocked by a Backend-User)
		//     AND (the event is in the future OR editing elapsed events is allowed) 
		// These conditions are the same for duplicating, as duplicating changes ONLY the date, nothing else.
		  
        //public function addEventInformation(Database_Result $objEvents, $objId, $objCalendar, &$arrEvents, $strUrl, $userID, $UserIsAdmin)
		public function addEventInformation($objEvents, $objId, $objCalendar, &$arrEvents, $strUrl, $userID, $UserIsAdmin)
        {
			$currentTime = time();
			foreach ($arrEvents as &$intnext) {
				foreach ($intnext as &$intdate) {
					foreach ($intdate as &$aEvent){
						if ($objEvents->id == $aEvent['id']) {															
							if (EditLinksAreAllowed ($objCalendar, $aEvent, $userID, $UserIsAdmin, $currentTime)){
								$this->addEditLinks($aEvent, $strUrl);																
							}
						}
					}
				}
			}
        }

         /**
         Manipulate the arrEvents-Array generated by ModuleCalendar and ModuleEventlist
         **/
         public function updateAllEvents($arrEvents, $arrCalendars, $intStart, $intEnd, $objCalendarModule)
        {
            
			if (!is_array($arrCalendars)) {
				return $arrEvents;
			}

            if(version_compare(VERSION.'.'.BUILD, '3.5.1', '>=')) {
				$this->import('StringUtil');
			} else {
				$this->import('String');			
			}
		
			$time = time();
            $this->import('FrontendUser', 'User');

			foreach ($arrCalendars as $id) {
				
				// get properties of this calendar
                $objCalendar = $this->Database->prepare("SELECT * FROM tl_calendar WHERE id=?")
                         			    	->limit(1)
											->execute($id);
											
											

                if ($objCalendar->allowEdit) {
                    // get the JumpToEdit-Page for this calendar
	                $objPage = $this->Database->prepare("SELECT id, alias FROM tl_page WHERE id=(SELECT caledit_jumpTo FROM tl_calendar WHERE id=?)")
									  ->limit(1)
									  ->execute($id);
					if ($objPage->numRows) {
						$strUrl = $this->generateFrontendUrl($objPage->row(), '');
					}
					else {
						$strUrl = $this->Environment->request;	
					}
					
					$AuthorizedUser = UserIsAuthorizedUser($objCalendar, $this->User);
					$UserIsAdmin    = UserIsAdmin($objCalendar, $this->User);
					
					if ($AuthorizedUser || $UserIsAdmin ) {
						// Now: Get all Events in this calendar (as in ModuleCalendar, but without the constraint "AND published=1")
						$objEvents = $this->Database->prepare("SELECT *, (SELECT title FROM tl_calendar WHERE id=?) AS calendar, (SELECT name FROM tl_user WHERE id=author) author FROM tl_calendar_events WHERE pid=? AND ((startTime>=? AND startTime<=?) OR (endTime>=? AND endTime<=?) OR (startTime<=? AND endTime>=?) OR (recurring=1 AND (recurrences=0 OR repeatEnd>=?) AND startTime<=?))" . (!BE_USER_LOGGED_IN ? " AND (start='' OR start<$time) AND (stop='' OR stop>$time)" : "") . " ORDER BY startTime")
											->execute($id, $id, $intStart, $intEnd, $intStart, $intEnd, $intStart, $intEnd, $intStart, $intEnd);

						if ($objEvents->numRows < 1) {
							continue;  // nothing to do here (no events found)
						}						
						
						while ($objEvents->next()) {
							// We have some events in this calendar, and the user is member of a group, which is allowed to edit events
							// So: Add Edit-Links to these Events.
							$this->addEventInformation($objEvents, $objEvents->id, $objCalendar, $arrEvents, $strUrl, $this->User->id, $UserIsAdmin);
						}
					}
				} // else: Frontend-Editing is not allowed for this calender. Modifications of the Events not necessary.

            }
            return $arrEvents;
         }
}

?>